{"version":3,"sources":["localStorage.js","components/Editor.js","components/BookMark.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["localForage","Storage","getItem","key","a","localStorage","content","JSON","parse","removeItem","setItem","value","stringify","EditorComponent","props","componentDidMount","setState","console","log","handleEditorChange","editor","state","this","initialValue","apiKey","init","height","branding","elementpath","resize","statusbar","content_css","Date","getTime","pagebreak_split_block","plugins","toolbar","onEditorChange","React","Component","BookMark","useState","bookMark","setBookMark","useEffect","ls","bookmark","getRating","Rating","name","size","max","onChange","event","newValue","useStyles","makeStyles","root","color","fontSize","fontVariantLigatures","lineHeight","minWidth","visibility","borderWidth","borderStyle","borderColor","borderImage","margin","padding","borderRadius","outline","Input","setName","classes","length","documentName","getDocumentName","className","e","target","App","Editor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fdc3b1d0.chunk.js","sourcesContent":["const localForage = () => {\n  const isStorage = typeof Storage !== \"undefined\";\n  if (isStorage) {\n    const getItem = async key => {\n      const content = await localStorage.getItem(key);\n      return JSON.parse(content);\n    };\n\n    const removeItem = async key => await localStorage.removeItem(key);\n\n    const setItem = async (key, value) => {\n      const content = JSON.stringify(value);\n      await localStorage.setItem(key, content);\n      return { [key]: content };\n    };\n\n    return {\n      getItem,\n      removeItem,\n      setItem\n    };\n  }\n  return null;\n};\n\nexport default localForage;\n","import React from \"react\";\nimport { Editor } from \"@tinymce/tinymce-react\";\nimport localStorage from \"../localStorage\";\n\nclass EditorComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: \"\"\n    };\n    this.localStorage = localStorage();\n  }\n\n  componentDidMount = async () => {\n    if (this.localStorage) {\n      const content = await this.localStorage.getItem(\"documentContent\");\n      this.setState({ content });\n    } else {\n      console.log(\"Sorry! No Web Storage support..\");\n    }\n  };\n\n  handleEditorChange = (content, editor) => {\n    this.setState({ content });\n    if (this.localStorage) {\n      this.localStorage.setItem(\"documentContent\", content);\n    } else {\n      console.log(\"Sorry! No Web Storage support..\");\n    }\n    //console.log(\"Content was updated:\", content);\n    //console.log(\"Content was updated:\", editor);\n  };\n\n  render() {\n    const { content } = this.state;\n    return (\n      <Editor\n        initialValue={content}\n        apiKey=\"w53jltrie1h5aeaaaq96rilp17d5kitruhi2whk5g47tyncu\"\n        init={{\n          height: \"100vh\",\n          branding: false,\n          elementpath: false,\n          resize: false,\n          statusbar: false,\n          content_css: \"index.css?\" + new Date().getTime(),\n          pagebreak_split_block: true,\n          plugins: [\n            \"advlist autolink lists link image charmap print preview anchor\",\n            \"searchreplace visualblocks code fullscreen\",\n            \"insertdatetime media table paste code help wordcount pagebreak\"\n          ],\n          toolbar:\n            \"pagebreak | undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help\"\n        }}\n        onEditorChange={this.handleEditorChange}\n      />\n    );\n  }\n}\n\nexport default EditorComponent;\n","import React, { useEffect, useState } from \"react\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport localStorage from \"../localStorage\";\n\nconst BookMark = () => {\n  const [bookMark, setBookMark] = useState(0);\n\n  useEffect(() => {\n    const getRating = async () => {\n      const ls = localStorage();\n      if (ls) {\n        const bookmark = (await ls.getItem(\"documentBookMark\")) || 0;\n        setBookMark(bookmark);\n      } else {\n        console.log(\"Sorry! No Web Storage support..\");\n      }\n    };\n    getRating();\n  }, []);\n\n  return (\n    <Rating\n      name=\"size-small\"\n      value={bookMark}\n      size=\"small\"\n      max={1}\n      onChange={(event, newValue) => {\n        setBookMark(newValue);\n        localStorage().setItem(\"documentBookMark\", newValue);\n      }}\n    />\n  );\n};\n\nexport default BookMark;\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AutosizeInput from \"react-input-autosize\";\nimport localStorage from \"../localStorage\";\n\nconst useStyles = makeStyles({\n  root: {\n    \"& input\": {\n      color: \"#000\",\n      fontSize: \"18px\",\n      fontVariantLigatures: \"no-contextual\",\n      height: \"20px\",\n      lineHeight: \"22px\",\n      minWidth: \"1px\",\n      visibility: \"visible\",\n      borderWidth: \"2px\",\n      borderStyle: \"solid\",\n      borderColor: \"transparent\",\n      borderImage: \"initial\",\n      margin: 0,\n      padding: \"2px 7px\",\n      borderRadius: \"2px\",\n      \"&:hover\": {\n        borderColor: \"#e5e5e5\"\n      },\n      \"&:focus\": {\n        borderColor: \"#1a73e8\",\n        borderRadius: \"4px\",\n        outline: \"none\",\n        \"-webkitAppearance\": \"none\",\n        \"-mozAppearance\": \"none\"\n      }\n    }\n  }\n});\n\nconst Input = () => {\n  const [name, setName] = useState(\"Untitled Document\");\n  const classes = useStyles();\n  const nameWidth = (name.length + 1) * 8.8 + \"px\";\n  const spacerSty = { width: nameWidth };\n\n  useEffect(() => {\n    const getDocumentName = async () => {\n      const ls = localStorage();\n      if (ls) {\n        const documentName =\n          (await ls.getItem(\"documentName\")) || \"Untitled Document\";\n        setName(documentName);\n      } else {\n        console.log(\"Sorry! No Web Storage support..\");\n      }\n    };\n    getDocumentName();\n  }, []);\n\n  return (\n    <AutosizeInput\n      name=\"document-name\"\n      value={name}\n      className={classes.root}\n      onChange={e => {\n        setName(e.target.value);\n        localStorage().setItem(\"documentName\", e.target.value);\n      }}\n    />\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport { Editor, BookMark, Input } from \"./components/index\";\n\nconst App = () => {\n  return (\n    <div>\n      <BookMark />\n      <Input />\n      <Editor />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}